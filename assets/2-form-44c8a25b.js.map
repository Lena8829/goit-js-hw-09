{"version":3,"file":"2-form-44c8a25b.js","sources":["../../src/js/2-form.js"],"sourcesContent":["/* \n * Використовуючи делегуваня, відстежуй на формі подію input \n \n * і щоразу записуй у локальне сховище об'єкт з полями email і message, у яких зберігай поточні значення полів форми. \n \n * Нехай ключем для сховища буде рядок \"feedback-form-state\".\n\n * Під час завантаження сторінки перевіряй стан сховища,\n \n * і якщо там є збережені дані, то заповнюй ними поля форми. \n \n * В іншому випадку поля повинні бути порожніми.\n\n * Під час сабміту форми очищай сховище і поля форми,\n\n* а також виводь у консоль об'єкт з полями email, message та їхніми поточними значеннями.\n*/\n\nconst STORAGE_KEY = 'feedback-form-state';\n\nconst form = document.querySelector('.feedback-form');\n\nform.addEventListener('input', textInput); // monitor the input event on the form\nform.addEventListener('submit', handleSubmit); // monitor the submit event on the form\n\nstorageStatus();\n//--------------------------------------------------------------------------------\n\nfunction textInput(event) {\n  const formData = {\n    email: form.email.value.trim(), // remove spaces with 'trim()'\n    message: form.message.value.trim(),\n  };\n\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(formData)); // saving data and make obj ---> a string\n}\n//------------------------------------------------------------------------------\n\nfunction storageStatus() {\n  const savedData = JSON.parse(localStorage.getItem(STORAGE_KEY)); // checking storage status\n\n  if (savedData) {\n    const { email, message } = savedData;\n    form.email.value = email || '';\n    form.message.value = message || '';\n  }\n} // previous data stay in fields\n//---------------------------------------------------------------------------------\n\nfunction handleSubmit(event) {\n  event.preventDefault(); // prevent to reload page after submit\n\n  const email = form.email.value.trim();\n  const message = form.message.value.trim();\n\n  // if all fields are filled\n  if (email && message) {\n    console.log({ email, message });\n\n    event.currentTarget.reset(); // clear the form after sumbit\n    localStorage.removeItem(STORAGE_KEY); // clear the storage after page reload\n  }\n}\n"],"names":["STORAGE_KEY","form","textInput","handleSubmit","storageStatus","event","formData","savedData","email","message"],"mappings":"AAkBA,MAAMA,EAAc,sBAEdC,EAAO,SAAS,cAAc,gBAAgB,EAEpDA,EAAK,iBAAiB,QAASC,CAAS,EACxCD,EAAK,iBAAiB,SAAUE,CAAY,EAE5CC,IAGA,SAASF,EAAUG,EAAO,CACxB,MAAMC,EAAW,CACf,MAAOL,EAAK,MAAM,MAAM,KAAM,EAC9B,QAASA,EAAK,QAAQ,MAAM,KAAM,CACtC,EAEE,aAAa,QAAQD,EAAa,KAAK,UAAUM,CAAQ,CAAC,CAC5D,CAGA,SAASF,GAAgB,CACvB,MAAMG,EAAY,KAAK,MAAM,aAAa,QAAQP,CAAW,CAAC,EAE9D,GAAIO,EAAW,CACb,KAAM,CAAE,MAAAC,EAAO,QAAAC,CAAS,EAAGF,EAC3BN,EAAK,MAAM,MAAQO,GAAS,GAC5BP,EAAK,QAAQ,MAAQQ,GAAW,EACjC,CACH,CAGA,SAASN,EAAaE,EAAO,CAC3BA,EAAM,eAAc,EAEpB,MAAMG,EAAQP,EAAK,MAAM,MAAM,KAAI,EAC7BQ,EAAUR,EAAK,QAAQ,MAAM,KAAI,EAGnCO,GAASC,IACX,QAAQ,IAAI,CAAE,MAAAD,EAAO,QAAAC,CAAS,CAAA,EAE9BJ,EAAM,cAAc,QACpB,aAAa,WAAWL,CAAW,EAEvC"}